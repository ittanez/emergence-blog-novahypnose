// articleService.ts - Version finale avec gestion des redirections

import { supabase } from '@/lib/supabase';

export async function getArticleBySlug(slug: string) {
  try {
    console.log("üîç Recherche article avec slug:", slug);
    
    // Utiliser la fonction RPC qui g√®re automatiquement les redirections
    const { data, error } = await supabase
      .rpc('get_article_by_slug', { input_slug: slug });

    if (error) {
      console.error('‚ùå Erreur RPC get_article_by_slug:', error);
      return { data: null, error };
    }

    if (!data || data.length === 0) {
      console.log("‚ùå Article non trouv√© pour le slug:", slug);
      return { data: null, error: { message: 'Article non trouv√©' } };
    }

    const article = data[0]; // RPC retourne un array

    // G√©rer les redirections
    if (article.is_redirect) {
      console.log(`üîÑ Redirection d√©tect√©e: ${slug} ‚Üí ${article.canonical_slug}`);
      
      return {
        data: article,
        error: null,
        redirect: {
          from: slug,
          to: article.canonical_slug,
          status: 301 // Redirection permanente
        }
      };
    }

    console.log("‚úÖ Article trouv√© directement:", article.title);
    return { data: article, error: null };

  } catch (error) {
    console.error('üí• Erreur inattendue dans getArticleBySlug:', error);
    return { data: null, error };
  }
}

// Fonction pour cr√©er un nouvel article (slug auto-g√©n√©r√© par le trigger)
export async function createArticle(articleData: any) {
  try {
    console.log("üìù Cr√©ation nouvel article:", articleData.title);
    
    const { data, error } = await supabase
      .from('articles')
      .insert([articleData])
      .select()
      .single();

    if (data) {
      console.log("‚úÖ Article cr√©√© avec slug:", data.slug);
    }

    return { data, error };
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de l\'article:', error);
    return { data: null, error };
  }
}

// Fonction pour mettre √† jour un article (slug reg√©n√©r√© si titre change)
export async function updateArticle(id: string, updates: any) {
  try {
    console.log("‚úèÔ∏è Mise √† jour article:", id);
    
    const { data, error } = await supabase
      .from('articles')
      .update(updates)
      .eq('id', id)
      .select()
      .single();

    if (data && updates.title) {
      console.log("‚úÖ Article mis √† jour avec nouveau slug:", data.slug);
    }

    return { data, error };
  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour de l\'article:', error);
    return { data: null, error };
  }
}

// Fonction utilitaire pour tester la g√©n√©ration de slug
export async function generateSlugPreview(title: string) {
  try {
    const { data, error } = await supabase
      .rpc('generate_clean_slug', { title });

    return { slug: data, error };
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©ration slug:', error);
    return { slug: null, error };
  }
}
