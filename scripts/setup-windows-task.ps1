# Script PowerShell pour configurer une t√¢che planifi√©e Windows
# Ex√©cute les v√©rifications de s√©curit√© toutes les heures

param(
    [string]$ProjectPath = $PSScriptRoot + "\..",
    [string]$TaskName = "EmergenceBlog-SecurityCheck"
)

Write-Host "üîß Configuration t√¢che planifi√©e Windows..." -ForegroundColor Cyan
Write-Host "üìÅ Chemin projet: $ProjectPath" -ForegroundColor Gray
Write-Host "üìã Nom t√¢che: $TaskName" -ForegroundColor Gray

# V√©rifier que Node.js est disponible
try {
    $nodeVersion = node --version
    Write-Host "‚úÖ Node.js trouv√©: $nodeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Node.js non trouv√©. Installez Node.js d'abord." -ForegroundColor Red
    exit 1
}

# Cr√©er le script batch pour la t√¢che
$batchScript = @"
@echo off
cd /d "$ProjectPath"
echo %date% %time% - D√©but v√©rification s√©curit√© >> security-check.log
node scripts/periodic-security-check.js >> security-check.log 2>&1
echo %date% %time% - Fin v√©rification s√©curit√© >> security-check.log
echo. >> security-check.log
"@

$batchPath = "$ProjectPath\scripts\security-check.bat"
$batchScript | Out-File -FilePath $batchPath -Encoding ASCII

Write-Host "üìù Script batch cr√©√©: $batchPath" -ForegroundColor Green

# Cr√©er la t√¢che planifi√©e
try {
    # Supprimer la t√¢che existante si elle existe
    Unregister-ScheduledTask -TaskName $TaskName -Confirm:$false -ErrorAction SilentlyContinue

    # Cr√©er nouvelle t√¢che
    $action = New-ScheduledTaskAction -Execute $batchPath
    $trigger = New-ScheduledTaskTrigger -Once -At (Get-Date) -RepetitionInterval (New-TimeSpan -Hours 1)
    $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable

    Register-ScheduledTask -TaskName $TaskName -Action $action -Trigger $trigger -Settings $settings -Description "V√©rification s√©curit√© automatique pour Emergence Blog"

    Write-Host "‚úÖ T√¢che planifi√©e '$TaskName' cr√©√©e avec succ√®s!" -ForegroundColor Green
    Write-Host "‚è∞ Fr√©quence: Toutes les heures" -ForegroundColor Yellow
    Write-Host "üìã Logs: $ProjectPath\security-check.log" -ForegroundColor Yellow

} catch {
    Write-Host "‚ùå Erreur cr√©ation t√¢che planifi√©e: $_" -ForegroundColor Red
    Write-Host "üí° Essayez d'ex√©cuter PowerShell en tant qu'administrateur" -ForegroundColor Yellow
    exit 1
}

# Test imm√©diat
Write-Host "`nüß™ Test de la v√©rification s√©curit√©..." -ForegroundColor Cyan
try {
    Set-Location $ProjectPath
    node scripts/periodic-security-check.js
    Write-Host "‚úÖ Test r√©ussi!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur test: $_" -ForegroundColor Red
}

Write-Host "`nüìã === CONFIGURATION TERMIN√âE ===" -ForegroundColor Green
Write-Host "Commandes utiles:" -ForegroundColor Yellow
Write-Host "‚Ä¢ Voir t√¢ches: Get-ScheduledTask | Where-Object {`$_.TaskName -like '*$TaskName*'}" -ForegroundColor Gray
Write-Host "‚Ä¢ D√©marrer manuellement: Start-ScheduledTask -TaskName '$TaskName'" -ForegroundColor Gray
Write-Host "‚Ä¢ Supprimer t√¢che: Unregister-ScheduledTask -TaskName '$TaskName'" -ForegroundColor Gray
Write-Host "‚Ä¢ Voir logs: Get-Content '$ProjectPath\security-check.log' -Tail 20" -ForegroundColor Gray

Write-Host "`nüîî Pour configurer les notifications Discord/Slack:" -ForegroundColor Cyan
Write-Host "1. Cr√©ez un webhook Discord ou Slack" -ForegroundColor Gray
Write-Host "2. Ajoutez l'URL dans un fichier .env:" -ForegroundColor Gray
Write-Host "   DISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/..." -ForegroundColor Gray
Write-Host "3. Relancez la v√©rification" -ForegroundColor Gray