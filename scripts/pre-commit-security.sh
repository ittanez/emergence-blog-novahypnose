#!/bin/bash
#
# Pre-commit hook pour emp√™cher l'exposition de secrets
# Place ce fichier dans .git/hooks/pre-commit et rends-le ex√©cutable
#

echo "üîí V√©rification s√©curit√© pre-commit..."

# V√©rifier les fichiers √† commiter
FILES=$(git diff --cached --name-only)

# Patterns de secrets √† d√©tecter
SECRET_PATTERNS=(
    "-----BEGIN.*PRIVATE KEY-----"
    "eyJ[A-Za-z0-9_-]*\.[A-Za-z0-9_-]*\.[A-Za-z0-9_-]*"  # JWT tokens
    "AKIA[0-9A-Z]{16}"  # AWS Access Key
    "AIza[0-9A-Za-z\\-_]{35}"  # Google API Key
    "sk_live_[0-9a-zA-Z]{24}"  # Stripe Live Key
    "rk_live_[0-9a-zA-Z]{24}"  # Stripe Restricted Key
    "xoxb-[0-9]{11,13}-[0-9]{11,13}-[0-9a-zA-Z]{24}"  # Slack Bot Token
)

# Extensions de fichiers √† ignorer
IGNORE_EXTENSIONS=("jpg" "jpeg" "png" "gif" "svg" "ico" "woff" "woff2" "ttf" "otf")

# Fonction pour v√©rifier si l'extension doit √™tre ignor√©e
should_ignore_file() {
    local file="$1"
    local ext="${file##*.}"
    for ignore_ext in "${IGNORE_EXTENSIONS[@]}"; do
        if [[ "$ext" == "$ignore_ext" ]]; then
            return 0
        fi
    done
    return 1
}

SECRETS_FOUND=false

for file in $FILES; do
    # Ignorer les fichiers binaires et certaines extensions
    if should_ignore_file "$file" || [[ "$file" == *"node_modules"* ]]; then
        continue
    fi

    # V√©rifier si le fichier existe (il pourrait avoir √©t√© supprim√©)
    if [[ ! -f "$file" ]]; then
        continue
    fi

    # Chercher les patterns de secrets
    for pattern in "${SECRET_PATTERNS[@]}"; do
        if grep -qE "$pattern" "$file"; then
            echo "‚ùå SECRET D√âTECT√â dans $file"
            echo "   Pattern: $pattern"
            SECRETS_FOUND=true
        fi
    done

    # V√©rifications sp√©cifiques
    if [[ "$file" == *.env* ]]; then
        echo "‚ùå Fichier .env d√©tect√©: $file"
        echo "   Les fichiers .env ne doivent jamais √™tre commit√©es"
        SECRETS_FOUND=true
    fi

    if [[ "$file" == *"service-account"* ]] || [[ "$file" == *"-key.json" ]]; then
        echo "‚ùå Fichier de cl√© d√©tect√©: $file"
        SECRETS_FOUND=true
    fi
done

# V√©rifier les messages de commit suspects
COMMIT_MSG=$(git log --format=%B -n 1 HEAD 2>/dev/null || echo "")
SUSPECT_WORDS=("password" "secret" "key" "token" "credential")

for word in "${SUSPECT_WORDS[@]}"; do
    if echo "$COMMIT_MSG" | grep -iq "$word"; then
        echo "‚ö†Ô∏è  Message de commit suspect d√©tect√© (contient '$word')"
        echo "   V√©rifiez que vous ne d√©crivez pas l'exposition d'un secret"
    fi
done

if [[ "$SECRETS_FOUND" == true ]]; then
    echo ""
    echo "üö® COMMIT BLOQU√â - Secrets d√©tect√©s!"
    echo ""
    echo "Actions recommand√©es:"
    echo "1. Supprimer les secrets des fichiers"
    echo "2. Ajouter les patterns au .gitignore"
    echo "3. Utiliser des variables d'environnement"
    echo "4. Si les secrets sont d√©j√† commit√©es, nettoyer l'historique"
    echo ""
    exit 1
fi

echo "‚úÖ Aucun secret d√©tect√© - Commit autoris√©"
exit 0