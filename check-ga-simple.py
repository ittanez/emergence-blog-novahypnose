#!/usr/bin/env python3
import json
import urllib.request
import urllib.parse
import base64
import time
from datetime import datetime, timedelta
import os

# Configuration
SERVICE_ACCOUNT_FILE = '/home/ittanez/.config/google-analytics/service-account-key.json'
PROPERTY_ID = '462297863'  # ID de la propri√©t√© GA4

def get_this_week_dates():
    """R√©cup√®re les dates de d√©but et fin de cette semaine"""
    today = datetime.now()
    # Lundi de cette semaine
    start_of_week = today - timedelta(days=today.weekday())
    start_date = start_of_week.strftime('%Y-%m-%d')
    end_date = today.strftime('%Y-%m-%d')
    return start_date, end_date

def create_jwt_token():
    """Cr√©e un JWT token pour l'authentification Google"""
    try:
        with open(SERVICE_ACCOUNT_FILE, 'r') as f:
            service_account = json.load(f)
        
        # Headers JWT
        header = {
            "alg": "RS256",
            "typ": "JWT"
        }
        
        # Payload JWT
        now = int(time.time())
        payload = {
            "iss": service_account["client_email"],
            "scope": "https://www.googleapis.com/auth/analytics.readonly",
            "aud": "https://oauth2.googleapis.com/token",
            "exp": now + 3600,
            "iat": now
        }
        
        # Note: Pour une impl√©mentation compl√®te, il faudrait signer le JWT avec la cl√© priv√©e
        # Ici on utilise une approche simplifi√©e pour le test
        print("üîë Service Account trouv√©:")
        print(f"   Email: {service_account['client_email']}")
        print(f"   Project: {service_account['project_id']}")
        return service_account
        
    except Exception as e:
        print(f"‚ùå Erreur lecture service account: {e}")
        return None

def get_ga_data_simple():
    """Version simplifi√©e pour v√©rifier la configuration"""
    print("üîç V√âRIFICATION CONFIGURATION GOOGLE ANALYTICS")
    print("=" * 50)
    
    # Dates de cette semaine
    start_date, end_date = get_this_week_dates()
    print(f"üìÖ P√©riode analys√©e: {start_date} ‚Üí {end_date}")
    print()
    
    # V√©rifier le service account
    service_account = create_jwt_token()
    if not service_account:
        return
    
    print("‚úÖ Service Account configur√© correctement")
    print(f"üìä Propri√©t√© GA4 cible: {PROPERTY_ID}")
    print()
    
    # V√©rifier les donn√©es locales disponibles
    print("üîç DONN√âES DISPONIBLES LOCALEMENT:")
    print("-" * 30)
    
    # Chercher des donn√©es dans Supabase
    try:
        # Lire les types de donn√©es disponibles
        types_file = '/home/ittanez/emergence-blog-novahypnose/src/integrations/supabase/types.ts'
        if os.path.exists(types_file):
            print("‚úÖ Base de donn√©es Supabase configur√©e")
            with open(types_file, 'r') as f:
                content = f.read()
                if 'subscribers' in content:
                    print("   - Table abonn√©s newsletter")
                if 'articles' in content:
                    print("   - Table articles du blog")
                if 'email_logs' in content:
                    print("   - Logs d'emails")
        
        # V√©rifier les autres sources de donn√©es
        if os.path.exists('/home/ittanez/emergence-blog-novahypnose/build.log'):
            print("‚úÖ Logs de build disponibles")
        
        if os.path.exists('/home/ittanez/emergence-blog-novahypnose/dev.log'):
            print("‚úÖ Logs de d√©veloppement disponibles")
            
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur v√©rification donn√©es: {e}")
    
    print()
    print("üí° PROCHAINES √âTAPES:")
    print("1. V√©rifier que la propri√©t√© GA4 est correctement li√©e")
    print("2. Installer les d√©pendances Python pour l'API GA4")
    print("3. Ou utiliser directement l'interface Google Analytics")

if __name__ == "__main__":
    get_ga_data_simple()